// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using core_service.infrastructure.repository.postgresql.context;

#nullable disable

namespace core_service.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    [Migration("20250614053147_AddCurrencySimbol")]
    partial class AddCurrencySimbol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("core_service.domain.models.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("7d98edfb-9b4e-4f72-a8ab-723dd7e86be3"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 5, 31, 46, 656, DateTimeKind.Utc).AddTicks(2088))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("currency_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Balance", "core_service.domain.models.BankAccount.Balance#Balance", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("balance");

                            b1.Property<bool>("isMaybeNegative")
                                .HasColumnType("boolean")
                                .HasColumnName("is_maybe_negative");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Color", "core_service.domain.models.BankAccount.Color#Color", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("color");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "core_service.domain.models.BankAccount.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("currency_id");

                    b.ToTable("bank_accounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("core_service.domain.models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("7afdc300-fd58-4bd0-90c6-45f95e6a3a2c"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 5, 31, 46, 654, DateTimeKind.Utc).AddTicks(7047))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("category_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Color", "core_service.domain.models.Category.Color#Color", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("color");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "core_service.domain.models.Category.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("category_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("fad1c114-b865-45a0-a361-8ffb1afb74ff"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 5, 31, 46, 652, DateTimeKind.Utc).AddTicks(7616))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "core_service.domain.models.Currency.FullName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IsoCode", "core_service.domain.models.Currency.IsoCode#IsoCode", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("iso_code");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Simbol", "core_service.domain.models.Currency.Simbol#CurrencySimbol", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("simbol");
                        });

                    b.HasKey("Id");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("fb84a9b3-d30c-4b81-ab65-61c43afe86b8"));

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 5, 31, 46, 666, DateTimeKind.Utc).AddTicks(8533))
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("category_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("credit_bank_account_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("debet_bank_account_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("period_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "core_service.domain.models.Operation.Amount#UDecimal", b1 =>
                        {
                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "core_service.domain.models.Operation.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("category_id");

                    b.HasIndex("credit_bank_account_id");

                    b.HasIndex("debet_bank_account_id");

                    b.HasIndex("period_id");

                    b.ToTable("operations", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.valueobjects.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("1911eea3-6701-4e76-b632-98ad345f9b82"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 5, 31, 46, 653, DateTimeKind.Utc).AddTicks(5915))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("TypePeriod")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("Id");

                    b.ToTable("periods", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.valueobjects.Term", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("a1f8e239-3989-4de0-a4ff-6f18a444c849"));

                    b.Property<long>("CountUnits")
                        .HasColumnType("bigint")
                        .HasColumnName("count_units");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 5, 31, 46, 653, DateTimeKind.Utc).AddTicks(529))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("terms", (string)null);
                });

            modelBuilder.Entity("core_service.infrastructure.repository.postgresql.models.HiddenCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("CategoryId", "UserId");

                    b.ToTable("hidden_categories", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.ActiveBankAccount", b =>
                {
                    b.HasBaseType("core_service.domain.models.BankAccount");

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("buy_date");

                    b.Property<int>("TypeActive")
                        .HasColumnType("integer")
                        .HasColumnName("type_active");

                    b.ComplexProperty<Dictionary<string, object>>("BuyPrice", "core_service.domain.models.ActiveBankAccount.BuyPrice#UDecimal", b1 =>
                        {
                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("buy_price");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhotoUrl", "core_service.domain.models.ActiveBankAccount.PhotoUrl#PhotoUrl", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Url")
                                .HasColumnType("text")
                                .HasColumnName("photo_url");
                        });

                    b.ToTable("active_bank_accounts", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.ContributionBankAccount", b =>
                {
                    b.HasBaseType("core_service.domain.models.BankAccount");

                    b.Property<DateTime?>("ActualСlosed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_closed");

                    b.Property<int>("TypeContribution")
                        .HasColumnType("integer")
                        .HasColumnName("type_contribution");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "core_service.domain.models.ContributionBankAccount.Amount#UDecimal", b1 =>
                        {
                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "core_service.domain.models.ContributionBankAccount.DateRange#DateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_date");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Percent", "core_service.domain.models.ContributionBankAccount.Percent#PercentContribution", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("CountDays")
                                .HasColumnType("integer")
                                .HasColumnName("percent_count_days");

                            b1.ComplexProperty<Dictionary<string, object>>("Percent", "core_service.domain.models.ContributionBankAccount.Percent#PercentContribution.Percent#UDecimal", b2 =>
                                {
                                    b2.Property<decimal>("Value")
                                        .HasColumnType("numeric")
                                        .HasColumnName("percent");
                                });
                        });

                    b.ToTable("contribution_bank_accounts", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.CreditBankAccount", b =>
                {
                    b.HasBaseType("core_service.domain.models.BankAccount");

                    b.Property<int>("TypeCredit")
                        .HasColumnType("integer")
                        .HasColumnName("type_credit");

                    b.Property<Guid?>("loan_object_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("term_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "core_service.domain.models.CreditBankAccount.Amount#UDecimal", b1 =>
                        {
                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "core_service.domain.models.CreditBankAccount.DateRange#DateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_date");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("InitPayment", "core_service.domain.models.CreditBankAccount.InitPayment#UDecimal", b1 =>
                        {
                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("init_payment");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Percent", "core_service.domain.models.CreditBankAccount.Percent#Percent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("percent");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PurposeLoan", "core_service.domain.models.CreditBankAccount.PurposeLoan#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("purpose_loan_name");
                        });

                    b.HasIndex("loan_object_id");

                    b.HasIndex("term_id");

                    b.ToTable("credit_bank_accounts", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.DebetBankAccount", b =>
                {
                    b.HasBaseType("core_service.domain.models.BankAccount");

                    b.ToTable("debet_bank_accounts", (string)null);
                });

            modelBuilder.Entity("core_service.domain.models.BankAccount", b =>
                {
                    b.HasOne("core_service.domain.models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("core_service.domain.models.Category", b =>
                {
                    b.HasOne("core_service.domain.models.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("category_id");
                });

            modelBuilder.Entity("core_service.domain.models.Operation", b =>
                {
                    b.HasOne("core_service.domain.models.BankAccount", null)
                        .WithMany("Operations")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("core_service.domain.models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("category_id");

                    b.HasOne("core_service.domain.models.BankAccount", "CreditBankAccount")
                        .WithMany()
                        .HasForeignKey("credit_bank_account_id");

                    b.HasOne("core_service.domain.models.BankAccount", "DebetBankAccount")
                        .WithMany()
                        .HasForeignKey("debet_bank_account_id");

                    b.HasOne("core_service.domain.models.valueobjects.Period", "Period")
                        .WithMany()
                        .HasForeignKey("period_id");

                    b.Navigation("Category");

                    b.Navigation("CreditBankAccount");

                    b.Navigation("DebetBankAccount");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("core_service.domain.models.ActiveBankAccount", b =>
                {
                    b.HasOne("core_service.domain.models.BankAccount", null)
                        .WithOne()
                        .HasForeignKey("core_service.domain.models.ActiveBankAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core_service.domain.models.ContributionBankAccount", b =>
                {
                    b.HasOne("core_service.domain.models.BankAccount", null)
                        .WithOne()
                        .HasForeignKey("core_service.domain.models.ContributionBankAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core_service.domain.models.CreditBankAccount", b =>
                {
                    b.HasOne("core_service.domain.models.BankAccount", null)
                        .WithOne()
                        .HasForeignKey("core_service.domain.models.CreditBankAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core_service.domain.models.ActiveBankAccount", "LoanObject")
                        .WithMany()
                        .HasForeignKey("loan_object_id");

                    b.HasOne("core_service.domain.models.valueobjects.Term", "Term")
                        .WithMany()
                        .HasForeignKey("term_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanObject");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("core_service.domain.models.DebetBankAccount", b =>
                {
                    b.HasOne("core_service.domain.models.BankAccount", null)
                        .WithOne()
                        .HasForeignKey("core_service.domain.models.DebetBankAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("core_service.domain.models.BankAccount", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("core_service.domain.models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
